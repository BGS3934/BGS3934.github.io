<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>AR Tetris</title>
  <script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
  <script src="https://mixedreality.mozilla.org/webxr-polyfill/build/webxr-polyfill.js"></script>
</head>
<body>
  <a-scene xrweb="arMode: true">
    
    <!-- Random Colors for Cubes -->
    <a-assets>
      <template id="cube-template">
        <a-box position="0 0 0" scale="0.5 0.5 0.5"></a-box>
      </template>
    </a-assets>

    <!-- Player's Viewpoint and Controllers -->
    <a-camera position="0 1.6 0"></a-camera>
    <a-entity id="right-hand" laser-controls="hand: right" rotation-listener></a-entity>
    <a-entity id="left-hand" laser-controls="hand: left"></a-entity>

    <a-light type="ambient" color="#ffffff" intensity="1"></a-light>

    <!-- Script to manage dropping blocks and controller input -->
    <script>
      // Function to generate a random color
      function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
          color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
      }

      // Generate a random block made of 4 cubes
      function generateBlock() {
        const block = document.createElement('a-entity');
        const positions = [[0, 0, 0], [0.5, 0, 0], [0, 0.5, 0], [-0.5, 0, 0]];  // Sample shape, like Tetris piece
        positions.forEach(pos => {
          const cube = document.createElement('a-box');
          cube.setAttribute('position', pos.join(' '));
          cube.setAttribute('scale', '0.5 0.5 0.5');
          cube.setAttribute('color', getRandomColor());
          block.appendChild(cube);
        });
        return block;
      }

      // Initialize a new block at a given position
      function spawnBlock() {
        const block = generateBlock();
        block.setAttribute('position', `0 5 3`);
        document.querySelector('a-scene').appendChild(block);
        return block;
      }

      // Variables for control and speed
      let currentBlock = spawnBlock();
      let dropSpeed = 0.02;
      let movingLeft = false;
      let movingRight = false;
      let rotating = false;

      // Game Loop for movement and dropping
      setInterval(() => {
        let position = currentBlock.getAttribute('position');
        
        // Move left or right based on controller input
        if (movingLeft) {
          position.x -= 0.1;
        }
        if (movingRight) {
          position.x += 0.1;
        }

        // Apply drop speed
        position.y -= dropSpeed;

        // Update block position
        currentBlock.setAttribute('position', position);

        // Check if block has reached the ground and spawn a new block
        if (position.y <= 0.5) {
          currentBlock = spawnBlock();
        }
      }, 50);  // Runs 20 times per second

      // Set up event listeners for controller buttons
      document.addEventListener('gamepadbuttondown', (event) => {
        const button = event.detail.index;
        // A button (rotate left)
        if (button === 0) {
          rotating = true;
          currentBlock.object3D.rotation.y -= Math.PI / 2;
        }
        // B button (rotate right)
        if (button === 1) {
          rotating = true;
          currentBlock.object3D.rotation.y += Math.PI / 2;
        }
        // X button (move left)
        if (button === 2) {
          movingLeft = true;
        }
        // Y button (move right)
        if (button === 3) {
          movingRight = true;
        }
        // Trigger button (drop faster)
        if (button === 4) {
          dropSpeed = 0.1;
        }
      });

      // Reset controls when buttons are released
      document.addEventListener('gamepadbuttonup', (event) => {
        const button = event.detail.index;
        if (button === 2) {
          movingLeft = false;
        }
        if (button === 3) {
          movingRight = false;
        }
        if (button === 4) {
          dropSpeed = 0.02;
        }
      });
    </script>
  </a-scene>
</body>
</html>
